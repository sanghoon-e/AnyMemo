apply plugin: 'com.android.application'

repositories {
    mavenCentral()
    google()
    maven { url "https://jitpack.io" }
}

android {
    compileSdkVersion 29

    defaultConfig {
        versionCode 237
        versionName "10.11.7"
        minSdkVersion 16
        targetSdkVersion 29
        testApplicationId "org.liberty.android.fantastischmemo.test"
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
        multiDexEnabled true
        archivesBaseName = "AnyMemo"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }

    dataBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        debug {
            testCoverageEnabled true
            versionNameSuffix "-${getBuildString()}"
        }
        release {
            minifyEnabled true
            proguardFile 'proguard.cfg'
        }
    }

    flavorDimensions "mode", "api"

    productFlavors {
        free {
            applicationId "org.liberty.android.fantastischmemo"
            dimension "mode"
        }
        pro {
            applicationId "org.liberty.android.fantastischmemopro"
            dimension "mode"
        }
        dev {
            applicationId "org.liberty.android.fantastischmemodev"
            dimension "mode"
        }
        api21 {
            minSdkVersion 21
            dimension "api"
        }
        api16 {
            minSdkVersion 16
            dimension "api"
        }
    }

    lintOptions {
        disable 'MissingTranslation'
        disable 'ExtraTranslation'
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
    }
}

dependencies {
    implementation 'androidx.legacy:legacy-support-core-utils:1.0.0'
    implementation 'androidx.fragment:fragment:1.2.5'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.google.android.material:material:1.2.0'
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'androidx.browser:browser:1.2.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    implementation "com.j256.ormlite:ormlite-core:5.1"
    implementation "com.j256.ormlite:ormlite-android:5.1"
    implementation "com.squareup.okhttp3:okhttp:3.10.0"

    implementation "io.reactivex.rxjava2:rxjava:2.0.4"
    implementation "io.reactivex.rxjava2:rxandroid:2.0.1"

    implementation "commons-io:commons-io:2.4"

    implementation "com.google.guava:guava:27.0.1-android"
    implementation "com.opencsv:opencsv:3.4"
    implementation "com.github.PhilJay:MPAndroidChart:v2.1.6"
    implementation "com.rarepebble:colorpicker:2.0.0"
    implementation "com.simplify:ink:1.0.0"

    implementation "com.google.dagger:dagger:2.22.1"
    annotationProcessor "com.google.dagger:dagger-compiler:2.22.1"

    compileOnly "javax.annotation:jsr250-api:1.0"

    androidTestImplementation "com.crittercism.dexmaker:dexmaker:1.4"
    androidTestImplementation "com.crittercism.dexmaker:dexmaker-dx:1.4"
    androidTestImplementation "com.crittercism.dexmaker:dexmaker-mockito:1.4"
    androidTestImplementation "org.mockito:mockito-core:1.10.19"
    androidTestImplementation 'androidx.annotation:annotation:1.1.0'
    androidTestImplementation('androidx.test.espresso:espresso-core:3.2.0')
    androidTestImplementation('androidx.test.espresso:espresso-intents:3.2.0')

    androidTestImplementation "androidx.test:runner:1.2.0"
}

static def getBuildString () {
    def date = new Date()
    def formattedDate = date.format('yyMMdd')
    return "b" + formattedDate
}

task copySecretsIfNotExists {
    doLast {
        if (file('src/main/java/org/liberty/android/fantastischmemo/AMSecrets.java').exists()) {
            logger.warn('Removing AMSecrets.java since it is now in common package.')
            delete 'src/main/java/org/liberty/android/fantastischmemo/AMSecrets.java'
        }
        if (!file('src/main/java/org/liberty/android/fantastischmemo/common/AMSecrets.java').exists()) {
            logger.warn('Empty AMSecrets.java is created from AMSecrets.java.template. Please fill in the values.')
            copy {
                from "src/main/java/org/liberty/android/fantastischmemo/common/"
                into "src/main/java/org/liberty/android/fantastischmemo/common/"
                rename "AMSecrets.java.template", "AMSecrets.java"
                include "AMSecrets.java.template"
            }
        }
    }
}

preBuild.dependsOn copySecretsIfNotExists 
apply plugin: 'jacoco'
